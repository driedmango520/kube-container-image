/*
Copyright 2025.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/driedmango520/kube-container-image/api/image.driedmango.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ImageBuildLister helps list ImageBuilds.
// All objects returned here must be treated as read-only.
type ImageBuildLister interface {
	// List lists all ImageBuilds in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ImageBuild, err error)
	// ImageBuilds returns an object that can list and get ImageBuilds.
	ImageBuilds(namespace string) ImageBuildNamespaceLister
	ImageBuildListerExpansion
}

// imageBuildLister implements the ImageBuildLister interface.
type imageBuildLister struct {
	indexer cache.Indexer
}

// NewImageBuildLister returns a new ImageBuildLister.
func NewImageBuildLister(indexer cache.Indexer) ImageBuildLister {
	return &imageBuildLister{indexer: indexer}
}

// List lists all ImageBuilds in the indexer.
func (s *imageBuildLister) List(selector labels.Selector) (ret []*v1.ImageBuild, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ImageBuild))
	})
	return ret, err
}

// ImageBuilds returns an object that can list and get ImageBuilds.
func (s *imageBuildLister) ImageBuilds(namespace string) ImageBuildNamespaceLister {
	return imageBuildNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ImageBuildNamespaceLister helps list and get ImageBuilds.
// All objects returned here must be treated as read-only.
type ImageBuildNamespaceLister interface {
	// List lists all ImageBuilds in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ImageBuild, err error)
	// Get retrieves the ImageBuild from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ImageBuild, error)
	ImageBuildNamespaceListerExpansion
}

// imageBuildNamespaceLister implements the ImageBuildNamespaceLister
// interface.
type imageBuildNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ImageBuilds in the indexer for a given namespace.
func (s imageBuildNamespaceLister) List(selector labels.Selector) (ret []*v1.ImageBuild, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ImageBuild))
	})
	return ret, err
}

// Get retrieves the ImageBuild from the indexer for a given namespace and name.
func (s imageBuildNamespaceLister) Get(name string) (*v1.ImageBuild, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("imagebuild"), name)
	}
	return obj.(*v1.ImageBuild), nil
}
